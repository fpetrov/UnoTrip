import datetime
import time

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.menu.states.trip_edit_state import TripEditState
from keyboards.row_keyboard import make_row_keyboard
from services.backend import BackendService
from services.open_street_map import OpenStreetMapService

router = Router()

callback_answers = ['–¥–∞', '–Ω–µ—Ç']


@router.callback_query(F.data.startswith('weather_action_'))
async def trip_action_tab(callback: CallbackQuery,
                          state: FSMContext,
                          backend: BackendService):
    reply = f'üëâ –•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –ª–æ–∫–∞—Ü–∏—é'

    trip_id = callback.data.split('_')[-1]
    trip_data = await backend.trip_service.get(trip_id)

    await state.update_data(trip_id=trip_id)

    builder = InlineKeyboardBuilder()

    for i, location in enumerate(trip_data['locations'], start=1):
        builder.row(InlineKeyboardButton(text=f"{i}. {location['name']}",
                                         callback_data=f'weather_forecast_{location["id"]}'))

    await callback.message.answer(
        text=reply,
        reply_markup=builder.as_markup()
    )

    await callback.answer()


@router.callback_query(F.data.startswith('weather_forecast_'))
async def location_weather_forecast(callback: CallbackQuery,
                                    state: FSMContext,
                                    backend: BackendService,
                                    open_street_map: OpenStreetMapService):
    location_id = callback.data.split('_')[-1]
    location = await backend.trip_service.get_location(location_id)

    utc_now = datetime.datetime.now(datetime.UTC)
    start_date = datetime.datetime.strptime(location['start'], '%Y-%m-%d').date()

    if start_date > utc_now:
        result = utc_now
    else:
        result = start_date

    forecast = await open_street_map.get_forecast(result.strftime('%Y-%m-%d'),
                                                  location['name'],
                                                  location['lat'],
                                                  location['lng'])

    if forecast is None:
        forecast = await open_street_map.get_forecast(utc_now.strftime('%Y-%m-%d'),
                                                  location['name'],
                                                  location['lat'],
                                                  location['lng'])

    weather = f'üå°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {location["name"]}:\n\n'

    current_weather = forecast['current_weather']
    weather += '<b>–°–µ–≥–æ–¥–Ω—è</b>\n'
    weather += f'üìÖ {datetime.date.today()}\n'
    weather += f'üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {current_weather["temperature"]}¬∞C\n'
    weather += f'üå°Ô∏è <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</b> {current_weather["apparent_temperature"]}¬∞C\n\n\n'

    for i, day in enumerate(forecast['weather_forecast'], start=1):
        weather += f'üìÖ <b>{day["date"]}</b>\n'
        weather += f'‚òÄÔ∏è <b>–£—Ç—Ä–æ–º:</b> {day["morning"]}¬∞C,     {parse_weather_type(day["weather_type"][0])} \n'
        weather += '---------------\n'
        weather += f'üåÖ <b>–î–Ω–µ–º:</b> {day["day"]}¬∞C,     {parse_weather_type(day["weather_type"][1])} \n'
        weather += '---------------\n'
        weather += f'üåá <b>–í–µ—á–µ—Ä–æ–º:</b> {day["evening"]}¬∞C,     {parse_weather_type(day["weather_type"][2])} \n'
        weather += '---------------\n'
        weather += f'üåÉ <b>–ù–æ—á—å—é:</b> {day["night"]}¬∞C,     {parse_weather_type(day["weather_type"][3])} \n\n\n'

    await callback.message.answer(
        text=weather,
        parse_mode='HTML'
    )

    await callback.answer()

    await state.set_state(None)


def parse_weather_type(weather_type: int):
    weather_text = get_weather_text(weather_type)

    if weather_text == '–Ø—Å–Ω–æ–µ –Ω–µ–±–æ':
        return '‚òÄÔ∏è ' + weather_text
    elif weather_text in ['–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ', '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å']:
        return '‚õÖÔ∏è ' + weather_text
    elif weather_text in ['–ü–∞—Å–º—É—Ä–Ω–æ', '–¢—É–º–∞–Ω –∏ –∏–Ω–µ—é—â–∏–π —Ç—É–º–∞–Ω']:
        return '‚òÅÔ∏è ' + weather_text
    elif weather_text.startswith('–ú–æ—Ä–æ—Å—å'):
        return 'üå¶Ô∏è ' + weather_text
    elif weather_text.startswith('–î–æ–∂–¥—å'):
        return 'üåßÔ∏è ' + weather_text
    elif weather_text.startswith('–ì—Ä–æ–∑–∞'):
        return '‚õàÔ∏è ' + weather_text
    elif weather_text.startswith('–°–Ω–µ–≥'):
        return '‚ùÑÔ∏è ' + weather_text
    elif weather_text in ['–¢—É–º–∞–Ω', '–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞']:
        return 'üå´Ô∏è ' + weather_text
    elif weather_text == '–°–Ω–µ–≥–æ–ø–∞–¥ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å':
        return 'üå™Ô∏è ' + weather_text
    else:
        return '‚òÄÔ∏è ' + weather_text


def get_weather_text(weather_code: int):
    weather_mapping = {
        0: '–Ø—Å–Ω–æ–µ –Ω–µ–±–æ',
        1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ',
        45: '–¢—É–º–∞–Ω',
        48: '–¢—É–º–∞–Ω –∏ –∏–Ω–µ–µ–º',
        51: '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
        53: '–°—Ä–µ–¥–Ω—è—è –º–æ—Ä–æ—Å—å',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
        56: '–õ–µ–≥–∫–∞—è –∏–∑–º–æ—Ä–æ–∑—å',
        57: '–°–∏–ª—å–Ω–∞—è –∏–∑–º–æ—Ä–æ–∑—å',
        61: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å: –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        63: '–°—Ä–µ–¥–Ω—è—è –¥–æ–∂–¥–ª–∏–≤–æ—Å—Ç—å',
        65: '–°–∏–ª—å–Ω–∞—è –¥–æ–∂–¥–ª–∏–≤–æ—Å—Ç—å',
        66: '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        67: '–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
        71: '–°–Ω–µ–≥: –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        73: '–°–Ω–µ–≥: —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        75: '–°–Ω–µ–≥: —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        77: '–ì—Ä–∞–¥',
        80: '–î–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        81: '–î–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        82: '–î–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        85: '–°–Ω–µ–≥–æ–ø–∞–¥ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        86: '–°–Ω–µ–≥–æ–ø–∞–¥ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏: —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        95: '–ì—Ä–æ–∑–∞: –Ω–µ–±–æ–ª—å—à–∞—è –∏–ª–∏ —É–º–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        96: '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º: –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å',
        99: '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º: —Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'
    }

    return weather_mapping.get(weather_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

