from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.menu.states.trip_edit_state import TripEditState
from keyboards.row_keyboard import make_row_keyboard
from services.backend import BackendService
from services.open_street_map import OpenStreetMapService

router = Router()

callback_answers = ['–¥–∞', '–Ω–µ—Ç']


@router.callback_query(F.data.startswith('trip_add_location_'))
async def trip_add_location(callback: CallbackQuery,
                            state: FSMContext):
    reply = f'üìç –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –ª–æ–∫–∞—Ü–∏–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ\n'

    trip_id = callback.data.split('_')[-1]

    await state.update_data(trip_id=trip_id)

    await callback.message.answer(reply)

    await callback.answer()

    await state.set_state(TripEditState.waiting_for_location_name)


@router.message(TripEditState.waiting_for_location_name,
                F.text.len() > 2,
                ~F.text.lower().in_(callback_answers))
async def location_chosen(message: Message, state: FSMContext, open_street_map: OpenStreetMapService):
    searched_city = await open_street_map.get_route_information(message.text)

    if not searched_city:
        await message.answer(
            text='‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
        )
        return

    print(*searched_city)

    await message.answer(
        text=f'ü§î –¢–≤–æ—è –ª–æ–∫–∞—Ü–∏—è <b>{searched_city[0]}</b>. –í–µ—Ä–Ω–æ?',
        parse_mode='HTML',
        reply_markup=make_row_keyboard('–î–∞', '–ù–µ—Ç')
    )

    await state.update_data(location=searched_city)


@router.message(
    TripEditState.waiting_for_location_name,
    F.text.lower() == callback_answers[0])
async def location_chosen_callback_yes(message: Message,
                                       state: FSMContext,
                                       backend: BackendService):
    await state.set_state(None)

    current_data = await state.get_data()

    location = current_data['location']
    location_data = {
        'name': location[0],
        'latitude': location[1],
        'longitude': location[2],
    }

    await state.update_data(location_data=location_data)

    await message.answer(
        text='üéâ –°—É–ø–µ—Ä, —Ç—ã —É–∫–∞–∑–∞–ª –ª–æ–∫–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
        reply_markup=ReplyKeyboardRemove())

    await state.set_state(TripEditState.waiting_for_location_start)


@router.message(
    TripEditState.waiting_for_location_name,
    F.text.lower() == callback_answers[1])
async def location_chosen_callback_no(message: Message):
    await message.answer(
        text='‚òπÔ∏è –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n'
             '–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏–≤ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω',
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(TripEditState.waiting_for_location_name)
async def location_chosen_invalid(message: Message):
    await message.answer(
        text='‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –≤–≤–µ–ª –ª–æ–∫–∞—Ü–∏—é –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
    )
