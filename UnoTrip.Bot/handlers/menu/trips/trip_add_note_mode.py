from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.menu.states.trip_edit_state import TripEditState
from keyboards.row_keyboard import make_row_keyboard
from services.backend import BackendService
from services.open_street_map import OpenStreetMapService

router = Router()

callback_answers = ['–¥–∞', '–Ω–µ—Ç']


@router.callback_query(F.data.startswith('trip_add_note_'))
async def trip_add_note(callback: CallbackQuery,
                        state: FSMContext):
    reply = f'–ë—É–¥—É—Ç –ª–∏ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –≤–∏–¥–µ—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?\n'

    trip_id = callback.data.split('_')[-1]

    await state.update_data(trip_id=trip_id)

    await callback.message.answer(reply,
                                  reply_markup=make_row_keyboard('–î–∞', '–ù–µ—Ç'))

    await callback.answer()

    await state.set_state(TripEditState.waiting_for_note_privacy)


@router.message(
    TripEditState.waiting_for_note_privacy,
    F.text.lower() == callback_answers[0])
async def privacy_chosen_callback_yes(message: Message,
                                      state: FSMContext):
    await state.update_data(note_privacy=False)

    await message.answer(
        text='üîì –¢–≤–æ—è –∑–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –≤—Å–µ–º, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏\n'
             '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏',
        reply_markup=ReplyKeyboardRemove()
    )

    await state.set_state(TripEditState.waiting_for_note_name)


@router.message(
    TripEditState.waiting_for_note_privacy,
    F.text.lower() == callback_answers[1])
async def privacy_chosen_callback_no(message: Message,
                                     state: FSMContext):
    await state.update_data(note_privacy=True)

    await message.answer(
        text='üîí –¢–≤–æ—è –∑–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n'
             '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏',
        reply_markup=ReplyKeyboardRemove()
    )

    await state.set_state(TripEditState.waiting_for_note_name)


@router.message(TripEditState.waiting_for_note_privacy)
async def privacy_chosen_invalid(message: Message):
    await message.answer(
        text='‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –≤–≤–µ–ª –æ—Ç–≤–µ—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
    )
